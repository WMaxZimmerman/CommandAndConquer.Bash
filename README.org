# CommandAndConquer.Bash

* Background
I write a lot of aliases and function for my team at work to do various things. 
One of the issues that I was having was, "how do I make sure the team knows how 
to use the aliases that I make?" To solve this I started to create an extra 
function for every alias that I made that was the name of that alias with a '?' 
appended to the end. This would allow my team to add a '?' at the end of an 
alias to output information about how to use it.

This worked for the most part, but it got rather tedious to try to make sure 
that all of my aliases were documented. Not only that, but also if a co-worker 
wanted to write an alias they need to remember to create the documentation 
function as well. Obviously this wasn't a very good long lasting solution. 

In the passed I had a similar problem when creating command line applications in
.Net. To solve that problem I had created [[https://github.com/WMaxZimmerman/CommandAndConquer][CommandAndConquer]]. In an effort to solve
this issue I set out to create a similar solution for bash. This is what I have 
created so far.

* Summary
The idea is that you can specify what you expect for parameters and then a 
process will verify those parameters and then either set the values or output an 
error message to the user. The process should also output documentation on the 
command when given a '?' as the final argument. 

* Usage
Create an array of expected parameters. The pattern and order for how you setup 
the parameters is important. The pattern can be found below.

"<name>:<type>:<required>:<values>"

** Name
This can be what ever you would want the name of your variable to be.
** Type
This is the type of the variable.
*** String
Any string value.
*** Number
Any number value. This includes negatives, decimals, and integers
** Required
This tells if the parameter is required or not.
*** required
If given this value that parameter will be required for the function to execute.
*** optional
If given this parameter will not be required and can be ignored.
** Values
This is where you can specify excepted values for the parameter. If you specify 
values then the user will be kicked out of execution with any invalid entry.
*** Notes
The values in this section should be delimited by "|". Do not put spaces between 
them as they will most likely get separated prematurely.

* Example
#+NAME: Example_Usage
#+BEGIN_SRC Bash
alias ex="'example'"
function example {
    # === state what your parameters are ===
    declare -a paramNames=(
	"env:enum:required:prod|cert|qual|devl"
	"queue:string"
	"query:string"
	"rank:number")

    # === Verify and set parameters ===
    verifyParameters "$@" || return 1

    # === Do your stuff here ===
    echo "$env $queue $query $rank"
    echo "Something"
}
#+END_SRC
